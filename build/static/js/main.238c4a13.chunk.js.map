{"version":3,"sources":["Components/MathRenderer.tsx","Calculators/Derivative.tsx","PartialDerivative.tsx","Calculators/Discriminant.tsx","Calculators/TangentPlane.tsx","Calculators/Taylor.tsx","Calculators/Constraint.tsx","Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MathRenderer","props","className","mathformula","Derivative","useState","textboxval","setTextBoxVal","latexval","setLatexVal","latexanswer","setLatexAnswer","type","value","placeholder","onChange","e","blockinline","target","parse","toTex","console","log","onClick","data","calculator","mathequation","fetch","method","headers","body","JSON","stringify","then","res","json","to","PartialDerivative","respectToBoxVal","setrespectToBoxVal","maxLength","respectTo","Discriminant","Accordion","AccordionSummary","expandIcon","aria-controls","id","discriminant","AccordionDetails","steps","map","l","text","latex","saddlepoints","number","min","max","TangentPlane","xval","setxval","yval","setyval","point","answer","Taylor","orderval","setorder","order","Constraint","constraintVal","setConstraintBoxVal","constraint","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","classes","AppBar","position","Toolbar","Typography","variant","App","data-cfasync","src","path","exact","component","action","name","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.238c4a13.chunk.js","sourcesContent":["// App.js\nimport React from \"react\";\n// import { parse } from \"mathjs\";\nimport { Node } from \"@nteract/mathjax\";\n\nconst MathRenderer = (props: any) => {\n  return (\n    <div>\n      <p className=\"mathrenderer\">\n        <Node>{props.mathformula}</Node>\n      </p>\n    </div>\n  );\n};\n\nexport default MathRenderer;\n","import { useState } from \"react\";\nimport \"../App.css\";\nimport MathRenderer from \"../Components/MathRenderer\";\nimport { parse } from \"mathjs\";\nimport { Link } from \"react-router-dom\";\n\nfunction Derivative() {\n  const [textboxval, setTextBoxVal] = useState(\"\");\n  const [latexval, setLatexVal] = useState(\"\");\n  const [latexanswer, setLatexAnswer] = useState(\"\");\n\n  const eqchange = (e: any) => {\n    setTextBoxVal(e.target.value);\n    let blockinline: string;\n    try {\n      blockinline = parse(e.target.value).toTex();\n      console.log(blockinline);\n    } catch {\n      blockinline = parse(`Not a valid input`).toTex();\n    }\n    setLatexVal(blockinline);\n  };\n\n  const sendMath = () => {\n    const data = {\n      calculator: \"derivative\",\n      data: { mathequation: textboxval },\n    };\n    console.log(data);\n    fetch(\"/calculator\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLatexAnswer(data);\n        console.log(data);\n      });\n  };\n\n  return (\n    <div className=\"standard\">\n      <h3>Derivative</h3>\n      <p>\n        Your equation must have the variable 'x' in it because any other\n        variable will be treated as a constant. Please enter your equation in\n        the textbox below.\n      </p>\n      <MathRenderer mathformula=\"\\frac{d}{d x} f\" />\n      <input\n        type=\"text\"\n        value={textboxval}\n        placeholder=\"Equation f\"\n        onChange={eqchange}\n      />\n      <button onClick={sendMath}>Go</button>\n      <MathRenderer mathformula={latexval}></MathRenderer>\n      <MathRenderer mathformula={latexanswer}></MathRenderer>\n      <Link to=\"/\">\n        <p className=\"smallerText\">Back to Home</p>\n      </Link>\n    </div>\n  );\n}\n\nexport default Derivative;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport MathRenderer from \"./Components/MathRenderer\";\nimport { parse } from \"mathjs\";\nimport { Link } from \"react-router-dom\";\n\nfunction PartialDerivative() {\n  const [textboxval, setTextBoxVal] = useState(\"\");\n  const [latexval, setLatexVal] = useState(\"\");\n  const [latexanswer, setLatexAnswer] = useState(\"\");\n  const [respectToBoxVal, setrespectToBoxVal] = useState(\"\");\n\n  const eqchange = (e: any) => {\n    setTextBoxVal(e.target.value);\n    let blockinline: string;\n    try {\n      blockinline = parse(e.target.value).toTex();\n      console.log(blockinline);\n    } catch {\n      blockinline = parse(`Not a valid input`).toTex();\n    }\n    setLatexVal(blockinline);\n  };\n\n  const varchange = (e: any) => {\n    setrespectToBoxVal(e.target.value);\n    let blockinline: string;\n    try {\n      blockinline = parse(e.target.value).toTex();\n      console.log(blockinline);\n    } catch {\n      blockinline = parse(`Not a valid input`).toTex();\n    }\n  };\n\n  const sendMath = () => {\n    const data = {\n      calculator: \"partial_derivative\",\n      data: { mathequation: textboxval, respectTo: respectToBoxVal },\n    };\n    console.log(data);\n    fetch(\"/calculator\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLatexAnswer(data);\n        console.log(data);\n      });\n  };\n\n  return (\n    <div className=\"standard\">\n      <h3>Partial Derivative</h3>\n      <p>\n        Write your equation and make sure to include which variable you are\n        taking the derivative of with respect to. <i>f</i> refers to the inputted equation. <i>?</i> refers to\n        the variable you are taking the derivative of with respect to.\n      </p>\n      <MathRenderer mathformula=\"\\frac{df}{d ?} (f)\" />\n      <input\n        type=\"text\"\n        value={textboxval}\n        placeholder=\"Equation f\"\n        onChange={eqchange}\n      />\n      <input\n        type=\"text\"\n        value={respectToBoxVal}\n        placeholder=\"?\"\n        maxLength={1}\n        onChange={varchange}\n        className=\"smallerTextBox\"\n      />\n      <button onClick={sendMath}>Go</button>\n      <MathRenderer mathformula={latexval}></MathRenderer>\n      <p>With respect to:</p>\n      <MathRenderer mathformula={respectToBoxVal}></MathRenderer>\n      <MathRenderer mathformula={latexanswer}></MathRenderer>\n      <Link to=\"/\">\n        <p className=\"smallerText\">Back to Home</p>\n      </Link>\n    </div>\n  );\n}\n\nexport default PartialDerivative;\n","import { useState } from \"react\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n// import Typography from \"@material-ui/core/Typography\";\n\nimport \"../App.css\";\nimport MathRenderer from \"../Components/MathRenderer\";\nimport { parse } from \"mathjs\";\nimport { Link } from \"react-router-dom\";\n\nfunction Discriminant() {\n  const [textboxval, setTextBoxVal] = useState(\"\");\n  const [latexval, setLatexVal] = useState(\"\");\n  const [latexanswer, setLatexAnswer] = useState(null);\n\n  const eqchange = (e: any) => {\n    setTextBoxVal(e.target.value);\n    let blockinline: string;\n    try {\n      blockinline = parse(e.target.value).toTex();\n      console.log(blockinline);\n    } catch {\n      blockinline = parse(`Not a valid input`).toTex();\n    }\n    setLatexVal(blockinline);\n  };\n\n  const sendMath = () => {\n    const data = {\n      calculator: \"discriminant\",\n      data: { mathequation: textboxval },\n    };\n    console.log(data);\n    fetch(\"/calculator\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLatexAnswer(data);\n        console.log(data);\n      });\n  };\n  return (\n    <div className=\"standard\">\n      <h3>Discriminant, Saddle Points, Local Minima and Local Maxima</h3>\n      <p>\n        The discriminant of the function f(x, y) can be found using the following\n        equation.\n      </p>\n      <MathRenderer mathformula=\"\\frac{d^{2}}{d x^{2}} f \\frac{d^{2}}{d y^{2}} f - \\left(\\frac{d^{2}}{d yd x} f\\right)^{2}\" />\n      <p>Your equation must include the variables x and y. </p>\n      <input\n        type=\"text\"\n        value={textboxval}\n        placeholder=\"Equation f(x, y)\"\n        onChange={eqchange}\n      />\n      <button onClick={sendMath}>Go</button>\n      <MathRenderer\n        className=\"mathrenderer\"\n        mathformula={latexval}\n      ></MathRenderer>\n      {latexanswer !== null ? (\n        <>\n          <h1>Discriminent</h1>\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <MathRenderer mathformula={latexanswer.discriminant} />\n            </AccordionSummary>\n\n            <AccordionDetails className=\"detailcenter\">\n              <ol>\n                {latexanswer.steps.discriminant.map((l) => (\n                  <>\n                    {\"text\" in l ? (\n                      <p>{l.text}</p>\n                    ) : (\n                      <MathRenderer mathformula={l.latex} />\n                    )}\n                  </>\n                ))}\n              </ol>\n            </AccordionDetails>\n          </Accordion>\n          <h1>Saddle Points</h1>\n          <ul>\n            {latexanswer.steps.saddlepoints.map((l) => (\n              <>\n                {\"text\" in l ? (\n                  <p>{l.text}</p>\n                ) : (\n                  <MathRenderer mathformula={l.latex} />\n                )}\n              </>\n            ))}\n            {latexanswer.saddlepoints.map((number) => (\n              <MathRenderer mathformula={number} />\n            ))}\n          </ul>\n          <h1>Local Minima</h1>\n          <ul>\n            {latexanswer.min.map((number) => (\n              <MathRenderer mathformula={number} />\n            ))}\n          </ul>\n          <h1>Local Maximum</h1>\n          <ul>\n            {latexanswer.max.map((number) => (\n              <MathRenderer mathformula={number} />\n            ))}\n          </ul>\n        </>\n      ) : (\n        \"\"\n      )}\n      <Link to=\"/\">\n        <p className=\"smallerText\">Back to Home</p>\n      </Link>\n    </div>\n  );\n}\n\nexport default Discriminant;\n","import { useState } from \"react\";\nimport \"../App.css\";\nimport MathRenderer from \"../Components/MathRenderer\";\nimport { parse } from \"mathjs\";\nimport { Link } from \"react-router-dom\";\n\nfunction TangentPlane() {\n  const [textboxval, setTextBoxVal] = useState(\"\");\n  const [xval, setxval] = useState(\"\");\n  const [yval, setyval] = useState(\"\");\n  const [latexval, setLatexVal] = useState(\"\");\n  const [latexanswer, setLatexAnswer] = useState(null);\n\n  const eqchange = (e: any) => {\n    setTextBoxVal(e.target.value);\n    let blockinline: string;\n    try {\n      blockinline = parse(e.target.value).toTex();\n      console.log(blockinline);\n    } catch {\n      blockinline = parse(`Not a valid input`).toTex();\n    }\n    setLatexVal(blockinline);\n  };\n\n  const sendMath = () => {\n    const data = {\n      calculator: \"tangentplane\",\n      data: { mathequation: textboxval, point: [xval, yval] },\n    };\n    console.log(data);\n    fetch(\"/calculator\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLatexAnswer(data);\n        console.log(data);\n      });\n  };\n  return (\n    <div className=\"standard\">\n      <h3>Equation for a tangent plane</h3>\n      <p>\n        This calculator finds the equation for a tangent plane to the graph of f(x, y) (your input) at a given point\n        (also your input). Make sure to use variables 'x' and 'y' and include a valid x and y value for the point.\n      </p>\n      <p>\n        This is done by taking the partial derivative of f(x, y) with respect to variables x and y separately, then\n        plugging in the given point for each partial derivative. Then, f(x, y) is evaluated at the given point\n        and the tangent plane is constructed.\n      </p>\n        <div className=\"sidebyside\">\n            <MathRenderer className=\"sidebyside\" mathformula=\"\\frac{df}{d x}\" />\n            &nbsp;&nbsp;\n            <MathRenderer className=\"sidebyside2\" mathformula=\"\\frac{df}{d y}\" />\n        </div>\n        <br></br>\n      <input\n        type=\"text\"\n        value={textboxval}\n        placeholder=\"Equation f(x, y)\"\n        onChange={eqchange}\n      />\n      <input\n        type=\"number\"\n        value={xval}\n        placeholder=\"X value\"\n        onChange={(e) => setxval(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        value={yval}\n        placeholder=\"Y value\"\n        onChange={(e) => setyval(e.target.value)}\n      />\n      <button onClick={sendMath}>Go</button>\n      <MathRenderer mathformula={latexval}></MathRenderer>\n      {latexanswer !== null ? (\n        <>\n          <h1>Equation of the Tangent Plane</h1>\n          <MathRenderer mathformula={latexanswer.answer} />\n        </>\n      ) : (\n        \"\"\n      )}\n      <Link to=\"/\">\n        <p className=\"smallerText\">Back to Home</p>\n      </Link>\n    </div>\n  );\n}\n\nexport default TangentPlane;\n","import { useState } from \"react\";\nimport \"../App.css\";\nimport MathRenderer from \"../Components/MathRenderer\";\nimport { parse } from \"mathjs\";\nimport { Link } from \"react-router-dom\";\n\nfunction Taylor() {\n  const [textboxval, setTextBoxVal] = useState(\"\");\n  const [xval, setxval] = useState(\"\");\n  const [yval, setyval] = useState(\"\");\n  const [orderval, setorder] = useState(\"\");\n  const [latexval, setLatexVal] = useState(\"\");\n  const [latexanswer, setLatexAnswer] = useState(null);\n\n  const eqchange = (e: any) => {\n    setTextBoxVal(e.target.value);\n    let blockinline: string;\n    try {\n      blockinline = parse(e.target.value).toTex();\n      console.log(blockinline);\n    } catch {\n      blockinline = parse(`Not a valid input`).toTex();\n    }\n    setLatexVal(blockinline);\n  };\n\n  const sendMath = () => {\n    const data = {\n      calculator: \"taylor\",\n      data: { mathequation: textboxval, point: [xval, yval], order: orderval },\n    };\n    console.log(data);\n    fetch(\"/calculator\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLatexAnswer(data);\n        console.log(data);\n      });\n  };\n  return (\n    <div className=\"standard\">\n      <h3>Taylor Polynomial</h3>\n      <p>\n        This Taylor Polynomial calculator works for multivariable equations. Your input can be f(x, y) or just f(x).\n        The Taylor Polynomial can be found using this formula:\n      </p>\n        <div className=\"sidebyside2\">\n            <div className=\"moveup\">\n                <MathRenderer mathformula=\"T_{1}(x, y)=f(x_{0},y_{0})+f_{x}(x_{0},y_{0})(x-x_{0})+f_{y}(x_{0},y_{0})(y-y_{0}) \\\\\"></MathRenderer>\n            </div>\n            <div className=\"moveup\">\n                <MathRenderer mathformula=\"T_{2}(x, y)=f(x_{0},y_{0})+f_{x}(x_{0},y_{0})(x-x_{0})+f_{y}(x_{0},y_{0})(y-y_{0})+\n                \\frac{f_{xx}(x_{0},y_{0})}{2}(x-x_{0})^{2}\\\\+\\frac{f_{yy}(x_{0},y_{0})}{2}(y-y_{0})^{2} +f_{xy}(x_{0},y_{0})\n                (x-x_{0})(y - y_{0}) \\\\\"></MathRenderer>\n            </div>\n        </div>\n        <p>This calculator can accept orders above 2.</p>\n      <input\n        type=\"text\"\n        value={textboxval}\n        placeholder=\"Equation\"\n        onChange={eqchange}\n      />\n      <input\n        type=\"number\"\n        value={xval}\n        placeholder=\"X value\"\n        onChange={(e) => setxval(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        value={yval}\n        placeholder=\"Y value\"\n        onChange={(e) => setyval(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        value={orderval}\n        placeholder=\"Order\"\n        onChange={(e) => setorder(e.target.value)}\n      />\n      <button onClick={sendMath}>Go</button>\n      <MathRenderer mathformula={latexval}></MathRenderer>\n      <p>\n          Centered on point: &nbsp;\n          <div className=\"sidebyside\">\n              <p className=\"parentheses\">(</p>\n            <MathRenderer mathformula={xval}></MathRenderer>\n            <p className=\"comma\">,</p>\n            <MathRenderer mathformula={yval}></MathRenderer>\n              <p className=\"parentheses\">)</p>\n          </div>\n      </p>\n      {latexanswer !== null ? (\n        <>\n          <h1>Taylor Polynomial</h1>\n          <MathRenderer mathformula={latexanswer} />\n        </>\n      ) : (\n        \"\"\n      )}\n      <Link to=\"/\">\n        <p className=\"smallerText\">Back to Home</p>\n      </Link>\n    </div>\n  );\n}\n\nexport default Taylor;\n","import { useState } from \"react\";\nimport \"../App.css\";\nimport MathRenderer from \"../Components/MathRenderer\";\nimport { parse } from \"mathjs\";\nimport { Link } from \"react-router-dom\";\n\nfunction Constraint() {\n  const [textboxval, setTextBoxVal] = useState(\"\");\n  const [latexval, setLatexVal] = useState(\"\");\n  const [latexanswer, setLatexAnswer] = useState(\"\");\n  const [constraintVal, setConstraintBoxVal] = useState(\"\");\n\n  const eqchange = (e: any) => {\n    setTextBoxVal(e.target.value);\n    let blockinline: string;\n    try {\n      blockinline = parse(e.target.value).toTex();\n      console.log(blockinline);\n    } catch {\n      blockinline = parse(`Not a valid input`).toTex();\n    }\n    setLatexVal(blockinline);\n  };\n\n  const varchange = (e: any) => {\n    setConstraintBoxVal(e.target.value);\n    let blockinline: string;\n    try {\n      blockinline = parse(e.target.value).toTex();\n      console.log(blockinline);\n    } catch {\n      blockinline = parse(`Not a valid input`).toTex();\n    }\n  };\n\n  const sendMath = () => {\n    const data = {\n      calculator: \"constraint\",\n      data: { mathequation: textboxval, constraint: constraintVal },\n    };\n    console.log(data);\n    fetch(\"/calculator\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLatexAnswer(data);\n        console.log(data);\n      });\n  };\n\n  return (\n    <div className=\"standard\">\n      <h3>Min and Max Subject to Constraint</h3>\n      <p>\n        Provide two equations, one that will be used to find extrema for,\n        and one that constraints the first equation. This calculator accepts all\n        three variables 'x' 'y' and 'z' although you can choose to use only 'x'\n        and 'y'.\n      </p>\n      <p>\n        This can be done without a calculator by using the Lagrange equations.\n      </p>\n        <MathRenderer mathformula=\"\\nabla f=\\lambda\\nabla g\"></MathRenderer>\n      <input\n        type=\"text\"\n        value={textboxval}\n        placeholder=\"Equation f\"\n        onChange={eqchange}\n      />\n      <input\n        type=\"text\"\n        value={constraintVal}\n        placeholder=\"Constraint g\"\n        onChange={varchange}\n      />\n      <button onClick={sendMath}>Go</button>\n      <MathRenderer mathformula={latexval}></MathRenderer>\n      <p>Subject to constraint: </p>\n      <MathRenderer mathformula={constraintVal}></MathRenderer>\n      <MathRenderer mathformula={latexanswer}></MathRenderer>\n      <Link to=\"/\">\n        <p className=\"smallerText\">Back to Home</p>\n      </Link>\n    </div>\n  );\n}\n\nexport default Constraint;\n","import React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link } from \"react-router-dom\";\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(3),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {/* <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton> */}\n          <Typography variant=\"h6\" className={classes.title}>\n            <Link to=\"/\" className=\"navbarvcalcs\">\n              Vcalcs\n            </Link>\n          </Typography>\n          <Typography variant=\"caption\" className={classes.menuButton}>\n            <Link to=\"/donate\" className=\"navbarvcalcs\">\n              Donate\n            </Link>\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","// import { MouseEventHandler, useState } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n// import MathRenderer from \"./Components/MathRenderer\";\n// import { parse } from \"mathjs\";\n// Removed switch\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Derivative from \"./Calculators/Derivative\";\nimport PartialDerivative from \"./PartialDerivative\";\nimport Discriminant from \"./Calculators/Discriminant\";\nimport TangentPlane from \"./Calculators/TangentPlane\";\nimport Taylor from \"./Calculators/Taylor\";\nimport Constraint from \"./Calculators/Constraint\";\nimport NavBar from \"./Navbar\";\nfunction App() {\n  const HomePage = () => (\n    <>\n      <div className=\"imagebackground\">\n        <div className=\"welcome\">\n          <h1>Welcome to vcalcs!</h1>\n          <p>\n            This website is dedicated to building custom niche math calculators\n            for students to use. Currently all our calculators are for common\n            vector calculus problems but we plan to expand our calculators to\n            more areas of math as well.\n          </p>\n          <p>\n            All our calculators were built using the Sympy math library. Sympy\n            is a great data science tool that allows you to do complex calculus\n            equations easily through python. We are able to parse the equations\n            that are sent to sympy through Sympy's built in parser. The front\n            end web application is built with React Typescript. To display all\n            the math equations we are using MathJax, a library to display math\n            equations in the browser\n          </p>\n          <p>\n            You can find a full list of our calculators in the box below. For\n            more instructions on how to use all the calculators please visit our{\" \"}\n            <Link to=\"/help\">help</Link> section.\n          </p>\n        </div>\n        <div className=\"standard\">\n          <Link to=\"/derivative\">\n            <p>Derivative</p>\n          </Link>\n          <Link to=\"/partial-derivative\">\n            <p>Partial Derivative</p>\n          </Link>\n          <Link to=\"/discriminant\">\n            <p>Discriminant</p>\n          </Link>\n          <Link to=\"/tangentplane\">\n            <p>Tangent Plane</p>\n          </Link>\n          <Link to=\"/taylor\">\n            <p>Taylor Polynomial</p>\n          </Link>\n          <Link to=\"/constraint\">\n            <p>Min and Max Subject to Constraint</p>\n          </Link>\n          <Link to=\"/help\">\n            <p className=\"smallerText\">Help</p>\n          </Link>\n          <Link to=\"/donate\">\n            <p className=\"smallerText\">Donate</p>\n          </Link>\n        </div>\n      </div>\n    </>\n  );\n\n  const Help = () => (\n    <div className=\"instructions\">\n      <h1>Instructions</h1>\n      <hr />\n      <h3>Derivative</h3>\n      <p>\n        Your equation must have the variable 'x' in it because any other\n        variable will be treated as a constant.\n      </p>\n      <h3>Partial Derivative</h3>\n      <p>\n        Write your equation and make sure to include which variable you are\n        taking the derivative of with respect to. <i>f</i> refers to the\n        inputted equation. <i>?</i> refers to the variable you are taking the\n        derivative of with respect to.\n      </p>\n      <h3>Discriminant</h3>\n      <p>\n        You must provide an equation that can be derived multiple times with\n        respect to variables 'x' and 'y'. Otherwise, your answer will be\n        provided as a zero. This is because in order to find the critical points\n        of a given function, you need to be able to take second partial\n        derivatives.\n      </p>\n      <h3>Tangent Plane</h3>\n      <p>\n        This calculator finds the equation for a tangent plane to the graph of\n        f(x, y) (your input) at a given point (also your input). Make sure to\n        use variables 'x' and 'y' and include a valid x and y value for the\n        point.\n      </p>\n      <h3>Taylor Polynomial</h3>\n      <p>\n        This Taylor Polynomial calculator works for multivariable equations.\n        Your input can be f(x, y) or just f(x).\n      </p>\n      <h3>Min and Max Subject to Constraint</h3>\n      <p>\n        Provide two equations, one that will be used to find extrema for, and\n        one that constraints the first equation. This calculator accepts all\n        three variables 'x' 'y' and 'z' although you can choose to use only 'x'\n        and 'y'.\n      </p>\n    </div>\n  );\n\n  const Donate = () => (\n    <div className=\"standard\">\n      <h3>\n        If you would like to see more calculators and improvements for the\n        current ones, consider donating. You can support this website with just\n        $1. If you choose to donate you can send us an email and request a\n        calculator be made. We will try our best to fulfill these requests.\n      </h3>\n      <form action=\"https://www.paypal.com/donate\" method=\"post\" target=\"_top\">\n        <input type=\"hidden\" name=\"business\" value=\"WHA5JTF556R44\" />\n        <input type=\"hidden\" name=\"no_recurring\" value=\"0\" />\n        <input type=\"hidden\" name=\"currency_code\" value=\"USD\" />\n        <input\n          type=\"image\"\n          src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif\"\n          className=\"donationborder\"\n          name=\"submit\"\n          title=\"PayPal - The safer, easier way to pay online!\"\n          alt=\"Donate with PayPal button\"\n        />\n      </form>\n      <h2>Thank you!</h2>\n    </div>\n  );\n\n  return (\n    <Router>\n      <NavBar />\n      <script\n        data-cfasync=\"false\"\n        type=\"text/javascript\"\n        src=\"https://www.linkonclick.com/a/display.php?r=4686119\"\n      ></script>\n      <div className=\"App\">\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/derivative\" component={Derivative} />\n        <Route path=\"/partial-derivative\" component={PartialDerivative} />\n        <Route path=\"/discriminant\" component={Discriminant} />\n        <Route path=\"/tangentplane\" component={TangentPlane} />\n        <Route path=\"/taylor\" component={Taylor} />\n        <Route path=\"/constraint\" component={Constraint} />\n        <Route path=\"/help\" component={Help} />\n        <Route path=\"/donate\" component={Donate} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}